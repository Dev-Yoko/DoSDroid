name: Build, Test & Release Android APK
run-name: ${{ github.event.inputs.repository }}:${{ github.event.inputs.taskName }}
env:
  main_project_module: workspace

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "Git repository URL"
        required: true
        default: "https://github.com/android/sunflower"
      defaultJdkVersion:
        description: "Default OpenJDK version to use if no match is found: 8 / 11 / 17 etc."
        required: true
        default: "8"
      mainBranchJdkVersion:
        description: "OpenJDK version for main or master branches"
        required: false
        default: "17"
      featureBranchJdkVersion:
        description: "OpenJDK version for feature branches"
        required: false
        default: "11"
      taskName:
        description: "build.gradle task name: assemble[Flavor]Debug"
        required: false
        default: "assembleDebug"
      appDirectory:
        description: "Default directory where build.gradle located [/your directory]"
        required: false
        default: ""
      releaseTag:
        description: "Tag for the release"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
        
    steps:
      - name: Set Current DATE
        run: |
          echo "🗓️ Setting current date..."
          echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "✅ Date set to ${{ env.date_today }}"

      - name: Determine JDK Version
        id: determine_jdk
        run: |
          echo "🔍 Determining JDK version..."
          branch_name=${{ github.ref_name }}
          default_jdk=${{ github.event.inputs.defaultJdkVersion }}
          main_jdk=${{ github.event.inputs.mainBranchJdkVersion }}
          feature_jdk=${{ github.event.inputs.featureBranchJdkVersion }}
          
          echo "📂 Branch name: $branch_name"
          echo "⚙️ Default JDK: $default_jdk"
          echo "⚙️ Main Branch JDK: $main_jdk"
          echo "⚙️ Feature Branch JDK: $feature_jdk"
          
          if [[ "$branch_name" == *"main"* || "$branch_name" == *"master"* ]]; then
            echo "🔧 Using JDK version: $main_jdk"
            echo "jdk_version=$main_jdk" >> $GITHUB_ENV
          elif [[ "$branch_name" == feature/* ]]; then
            echo "🔧 Using JDK version: $feature_jdk"
            echo "jdk_version=$feature_jdk" >> $GITHUB_ENV
          else
            echo "🔧 Using default JDK version: $default_jdk"
            echo "jdk_version=$default_jdk" >> $GITHUB_ENV
          echo "✅ JDK version set to ${{ env.jdk_version }}"

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ env.jdk_version }}
        run: echo "☕ Setting up JDK version ${{ env.jdk_version }}..."

      - name: Clone project
        run: |
          echo "📂 Cloning project repository..."
          git clone --depth=1 ${{ github.event.inputs.repository }} ${{ env.main_project_module }}
          echo "✅ Repository cloned to ${{ env.main_project_module }}"

      - name: Build APK
        working-directory: ./${{ env.main_project_module }}${{ github.event.inputs.appDirectory }}
        run: |
          echo "🔨 Building APK..."
          if [ ! -f "gradlew" ]; then 
            echo "🔧 Setting up Gradle wrapper..."
            gradle wrapper
          fi
          chmod +x gradlew
          ./gradlew ${{ github.event.inputs.taskName }} --stacktrace
          echo "✅ APK build completed"

      - name: Run Tests
        working-directory: ./${{ env.main_project_module }}${{ github.event.inputs.appDirectory }}
        run: |
          echo "🧪 Running tests..."
          ./gradlew test
          echo "✅ Tests completed"

      - name: Upload the APK artifact with 1 day retention
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.main_project_module }}${{ github.event.inputs.appDirectory }}/app/build/outputs/apk/
          name: apk-debug [${{ env.date_today }}]
          retention-days: 1
        run: echo "📦 Uploading APK artifact..."

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.releaseTag }}
          release_name: "Release ${{ github.event.inputs.releaseTag }}"
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.main_project_module }}${{ github.event.inputs.appDirectory }}/app/build/outputs/apk/debug/*.apk
          asset_name: "app-debug-${{ env.date_today }}.apk"
          asset_content_type: application/vnd.android.package-archive
        run: echo "🚀 Uploading APK to GitHub Release..."
