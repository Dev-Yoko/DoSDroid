name: Build, Test, and Release Android APK
run-name: ${{ github.event.inputs.repository }}:${{ github.event.inputs.taskName }}
env:
  main_project_module: workspace
  app_directory: ""
  date_today: ${{ steps.set_date.outputs.date_today }}
  
on:
  workflow_dispatch:
    inputs:
      repository:
        description: "Git repository URL"
        required: true
        default: "https://github.com/android/sunflower"
      jdkVersion:
        description: "OpenJDK version to use: 8 / 11 / 17 etc."
        required: false
        default: "17"
      taskName:
        description: "build.gradle task name: assemble[Flavor]Debug"
        required: false
        default: "assembleDebug"
      release:
        description: "Whether to release the APK (true/false)"
        required: false
        default: "false"
      yourAppName:
        description: "Name of your application"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Set Current DATE
        id: set_date
        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        shell: bash
        
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ github.event.inputs.jdkVersion }}

      - name: Clone project
        run: git clone --depth=1 ${{ github.event.inputs.repository }} ${{ env.main_project_module }}

      - name: Find appDirectory
        run: |
          app_directory=$(find ./${{ env.main_project_module }} -name "build.gradle" -exec dirname {} \; | head -n 1)
          echo "app_directory=${app_directory}" >> $GITHUB_ENV

      - name: Generate Gradle Wrapper
        working-directory: ${{ env.app_directory }}
        run: |
          cd ${{ env.app_directory }}
          if [ ! -f "gradlew" ]; then
            gradle wrapper --gradle-version 7.0.2  # Replace with the latest Gradle version
          fi
          chmod +x gradlew

      - name: Refresh Dependencies
        working-directory: ${{ env.app_directory }}
        run: |
          cd ${{ env.app_directory }}
          ./gradlew --refresh-dependencies || echo "No dependencies found"

      - name: Build APK
        working-directory: ${{ env.app_directory }}
        run: |
          cd ${{ env.app_directory }}
          ./gradlew ${{ github.event.inputs.taskName }} --stacktrace

      - name: Run tests
        working-directory: ${{ env.app_directory }}
        run: |
          cd ${{ env.app_directory }}
          ./gradlew test connectedAndroidTest --stacktrace

      - name: Calculate checksum
        id: checksum
        run: |
          cd ${{ env.app_directory }}/app/build/outputs/apk/
          shasum -a 256 *.apk | awk '{print $1}' > apk_checksum.txt
          echo "::set-output name=checksum::$(cat apk_checksum.txt)"

      - name: Upload the APK artifact with 1 day retention
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.app_directory }}/app/build/outputs/apk/
          name: apk-debug [${{ env.date_today }}]
          retention-days: 1

      - name: Run lint checks
        working-directory: ${{ env.app_directory }}
        run: |
          cd ${{ env.app_directory }}
          ./gradlew lintDebug --console=plain --max-warnings 0 || echo "Lint found issues"

      - name: Attempt to fix lint issues
        if: ${{ github.event.inputs.release == 'true' }}
        working-directory: ${{ env.app_directory }}
        run: |
          cd ${{ env.app_directory }}
          ./gradlew lintFixDebug --console=plain --max-warnings 0 || echo "Failed to fix lint issues"

      - name: Create Release
        if: ${{ github.event.inputs.release == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.0  # Replace with your desired tag name
          release_name: Release v1.0.0  # Replace with your desired release name
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: ${{ github.event.inputs.release == 'true' }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.app_directory }}/app/build/outputs/apk/*.apk
          asset_name: ${{ github.event.inputs.yourAppName }}-${{ github.event.inputs.taskName }}-${{ env.date_today }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Checksum as Release Asset
        if: ${{ github.event.inputs.release == 'true' }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.app_directory }}/app/build/outputs/apk/apk_checksum.txt
          asset_name: ${{ github.event.inputs.yourAppName }}-${{ github.event.inputs.taskName }}-${{ env.date_today }}-checksum.txt
          asset_content_type: text/plain
